"""
Django settings for test1 project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import datetime
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 指定当前文件对应的项目路径！
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'k0o-5!d#dna5jb(4*hot2tjwoviw0pul9o@15*o4^qezok=4!_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 增加可以登录的域名！
ALLOWED_HOSTS = ['api.meiduo.site', '127.0.0.1', 'localhost', 'www.meiduo.site']

# Application definition
import sys

# 即为将根目录下的apps添加到根目录下，这样可以直接搜索apps下的文件内容。
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 注册sessions 应用!
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 表明注册安装具备此配置属性的应用。详细见 users.apps.UserConfig
    'users.apps.UserConfig',
    'verifications.apps.VerificationsConfig',
    'rest_framework',
    # 可以实现跨域请求！
    'corsheaders',
    'oauth.apps.OauthConfig',
    'area.apps.AreaConfig',
    'goods.apps.GoodsConfig',
    'contents.apps.ContentsConfig',
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片模块
    # 开启定时任务应用！
    'django_crontab',
    # 第三方搜索引擎！
    # 'haystack',
    'carts.apps.CartsConfig',
    'orders.apps.OrdersConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 使用 session 中间件！
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lulu_store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 需要配置模板因为找不到文件！
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lulu_store.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',  # 数据库主机
        'PORT': 3306,  # 数据库端口
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'x',  # 数据库用户密码
        'NAME': 'meiduo_mall'  # 数据库名字
    }
}
# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/scripts/'
# 模型类之中提供了认证系统！ 此处使用了 drf 自带的模型类！
AUTH_USER_MODEL = 'users.User'

'''使用redis存储！'''
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # redis 保存机制开启，Session机制存储到redis之中!
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 图片验证码存储位置！
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 历史记录使用redis
    "history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 购物车使用redis
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

REST_FRAMEWORK = {
    # 使用第三方扩展 djangorestframework-jwt 代替cookie 进行身份验证！
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 异常处理
    'EXCEPTION_HANDLER': 'lulu_store.utils.exceptions.exception_handler',
    # 分页配置！
    'DEFAULT_PAGINATION_CLASS': 'lulu_store.utils.pagination.StandardResultsSetPagination',
    # 'PAGE_SIZE': 100  # 每页数目

}
# djangorestframework 扩展设置过期时间！
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 指向重写的类，增加了额外的功能!JWT 指向自定义的除token外返回文件！
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',

}
# 自定义认证后端！可以增加邮箱登录，或者手机号登录，用户名登录等！
# 前端 value 值会传参给authenticate
AUTHENTICATION_BACKENDS = [
    'users.utils.UsernameMobileAuthBackend',
]

# CORS 白名单，允许访问的ip与端口号！
# 凡是出现在白名单中的域名，都可以访问后端接口
CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:8080',
    'localhost:8080',
    'www.meiduo.site:8080',
    'api.meiduo.site:8000',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# QQ登录参数
QQ_APP_ID = '101474184'
QQ_APP_KEY = 'c6ce949e04e12ecc909ae6a8b09b637c'
QQ_REDIRECT_URL = 'http://www.meiduo.site:8080/oauth_callback.html'
QQ_STATE = '/'

# 邮箱发送必须的参数！
# 指定使用的是哪个模块
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 指定使用哪个邮局！
EMAIL_HOST = 'smtp.163.com'
# 指定发送端口
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'shiqilouyang@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = '12345a'
# 收件人看到的发件人
EMAIL_FROM = 'python<@163.com>'

# FastDFS storage服务器的配置，文件图片存储位置配置！
# django文件存储 重写的(文件写入类)类
DEFAULT_FILE_STORAGE = 'lulu_store.utils.fastdfs.fdfs_storage.FastDFSStorage'
# FastDFS
FDFS_URL = 'http://image.meiduo.site:8888/'
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')

# 富文本编辑器ckeditor配置服务给后台管理的，设置路由之后跳转是转到admin站点！
# 由于我们将通过Django上传的图片保存到了FastDFS中，而保存在FastDFS中的文件名没有后缀名，
# 因此ckeditor在处理上传后的文件名按照有后缀名来处理，所以会出现bug错误，
# 需要更改文件 ~/.virtualenvs/meiduo/lib/python3.5/site-packages/ckeditor_uploader/views.py
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        'height': 300,  # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图片保存路径，使用了FastDFS，所以此处设为''

# 定时任务设值每五分钟执行一次！
CRONJOBS = [
    # 每5分钟执行一次生成主页静态文件 (时间，函数，以及日志文件路径！)
    (
        '*/5 * * * *', 'contents.crons.generate_static_index_html',
        '>> /home/sxu/PycharmProjects/shiqi/django_project/lulu_store/log/crontab.log')
]
# 解决crontab中文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

# 添加静态文件保存的目录
GENERATED_STATIC_HTML_FILES_DIR = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), 'front_end_pc')

# Haystack 配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 指定搜索引擎！
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.43.108:9200/',  # 此处为elasticsearch运行的服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'meiduo',  # 指定elasticsearch建立的索引库的名称
    },
}

# 当添加、修改、删除数据时，自动生成索引,也就是分词更改之后自动生成新的搜索索引！
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

#日志文件的使用！
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        #verbose，输出日志级别名称，日志消息，以及生成日志消息的时间，进程，线程和模块。
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        #simple，只输出日志级别名称（例如 DEBUG）和日志消息。
        #日志的级别！该format字符串是一个普通的Python格式化字符串，用于描述要在每个日志记录行上输出的详细信息。
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        #django，将所有消息传递给console处理程序。
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/meiduo.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],
            'propagate': True,
        },
    }
}

'''
    此日志记录配置执行以下操作：
将配置标识为“dictConfig版本1”格式。目前，这是唯一的dictConfig格式版本。
定义两个格式化程序：

定义两个过滤器：
project.logging.SpecialFilter，使用别名special。如果此过滤器需要其他参数，则可以将它们作为过滤器配置字典中的附加键提供。在这种情况下，参数 foo将被赋予bar实例化时 的值SpecialFilter。
django.utils.log.RequireDebugTrue，其传递记录时 DEBUG是True。
定义两个处理程序：
console，a StreamHandler，打印任何INFO （或更高）消息sys.stderr。此处理程序使用simple 输出格式。
mail_admins，an AdminEmailHandler，将任何ERROR （或更高）消息通过电子邮件发送到网站ADMINS。此处理程序使用 special过滤器。
配置三个记录器：
myproject.custom，它传递所有INFO 或更高的消息，也将special过滤器传递给两个处理程序 - console，和mail_admins。这意味着所有INFO级别的消息（或更高级别）将被打印到控制台; ERROR和CRITICAL 消息也将通过电子邮件输出。

'''